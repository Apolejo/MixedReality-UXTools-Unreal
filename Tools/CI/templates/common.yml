parameters:
    TestOutputDir: $(Build.ArtifactStagingDirectory)\TestResults  # path to JSON file that will be produced by UE4 tests

steps:
# For the plugin build to succeed UE4 needs to be installed outside of the agent working directory.
# The tools directory location needs to be manually set on the build agent using AGENT_TOOLSDIRECTORY environment variable.
# This is due to UE4 using relative paths (between Engine and Source being built) for some of the identifiers in generated source files.
# Without this we end up with invalid identifiers due to ADO Pipelines using numbers in the folder structure.
- task: PowerShell@2
  displayName: 'Install UnrealEngine'
  inputs:
    targetType: 'filePath'
    filePath: $(ToolsDir)\scripts\install_package.ps1
    arguments: -feedName ue4-internal -versionFile $(UXTSourceDir)\EditorVersion.json -destination $(Agent.ToolsDirectory)\ue4 -artifactTool $(Agent.WorkFolder)\ArtifactTool_win10-x64_0.2.128\artifacttool.exe -pipelineVariableName UnrealEngine -PAT $(UE4FeedPAT) -RemovePackagesOlderThanDays 14 -IgnoreCleanUpErrors $false

- script: >
    $(UAT)
    BuildPlugin
    -Plugin="$(UXToolsPluginSourceDir)\UXTools.uplugin"
    -Package="$(UXToolsPluginOutputDir)"
    -TargetPlatforms="Win64+HoloLens+Android"
    -target=UXToolsGameNonUnity
  displayName: 'Build UXTools plugin'

- task: PublishBuildArtifacts@1
  displayName: 'Publish UXTools plugin to build artifacts'
  inputs:
    ArtifactName: 'UXTools'
    PathtoPublish: '$(UXToolsPluginOutputDir)'
  condition: and(succeeded(), not(eq(variables['Build.Reason'], 'PullRequest')))

- powershell: |
    # remove all folders that are symbolic links as they are incorrectly handled by Remove-Item in some versions of PowerShell
    Write-Host "Deleting symbolic links under $(UXToolsPluginSourceDir)"
    Get-ChildItem -Path "$(UXToolsPluginSourceDir)" -Recurse | Where-Object { $_.Attributes -band [IO.FileAttributes]::ReparsePoint } | ForEach-Object { $_.Delete() }
    Write-Host "Deleting folder $(UXToolsPluginSourceDir) with all of its contents"
    Remove-Item -Path "$(UXToolsPluginSourceDir)" -Recurse -Force -ErrorAction Ignore | Out-Null
    if (Test-Path $(UXToolsPluginSourceDir))
    {
      Write-Host "Not all items could be removed - remaining items:"
      Get-ChildItem $(UXToolsPluginSourceDir)
      exit 1
    }
    Write-Host "Copy the prebuilt plugin from $(UXToolsPluginOutputDir) to $(UXToolsPluginSourceDir)"
    Copy-Item -Path $(UXToolsPluginOutputDir) -Destination $(UXToolsPluginSourceDir) -Recurse
  displayName: 'Replace plugin source with prebuilt files'

- script: >
    $(UAT)
    BuildCookRun
    -project=$(UXTSourceDir)\UXToolsGame\UXToolsGame.uproject
    -clean
    -cook
    -allmaps
    -build
    -stage
    -package
    -platform=Win64
    -clientconfig=Development
    -serverconfig=Development
    -target=UXToolsGameNonUnity
  displayName: 'Build UXToolsGame (Win64|Development)'

- script: '$(UE4Editor) $(UXTSourceDir)\UXToolsGame\UXToolsGame.uproject -NoSound -ExecCmds="Automation RunTests UXTools" -TestExit="Automation Test Queue Empty" -Log -ReportOutputPath="${{ parameters.TestOutputDir }}\EditorTests"'
  displayName: 'Test UXTools in Editor'

- powershell: 'Get-Content $(UXTSourceDir)\UXToolsGame\Saved\Logs\UXToolsGame.log -Encoding utf8'
  displayName: 'Test logs'

- task: PowerShell@2
  displayName: 'Convert test results for publishing'
  inputs:
    targetType: 'filePath'
    filePath: $(UXTSourceDir)\Tools\scripts\ConvertTestOutputToXML.ps1
    arguments: -Path "${{ parameters.TestOutputDir }}\EditorTests\index.json" -Output ${{ parameters.TestOutputDir }}\EditorTests\results.xml

- task: PublishBuildArtifacts@1
  displayName: 'Publish Test result files to pipeline artifacts'
  inputs:
    ArtifactName: 'Test Results'
    PathtoPublish: '${{ parameters.TestOutputDir }}'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
    testResultsFiles: '${{ parameters.TestOutputDir }}\EditorTests\results.xml'
    failTaskOnFailedTests: true

- task: DownloadSecureFile@1
  name: signingCertificate
  displayName: 'Download signing certificate'
  inputs:
    secureFile: 'SigningCertificate.pfx'

- script: |
    IF NOT EXIST "$(UXTSourceDir)\UXToolsGame\Build" mkdir "$(UXTSourceDir)\UXToolsGame\Build"
    IF NOT EXIST "$(UXTSourceDir)\UXToolsGame\Build\HoloLens" mkdir "$(UXTSourceDir)\UXToolsGame\Build\HoloLens"
    copy "$(signingCertificate.secureFilePath)" "$(UXTSourceDir)\UXToolsGame\Build\HoloLens\SigningCertificate.pfx"
  displayName: 'Copy self-signing certificate (HoloLens)'

- script: >
    $(UAT)
    BuildCookRun
    -project=$(UXTSourceDir)\UXToolsGame\UXToolsGame.uproject
    -clean
    -cook
    -allmaps
    -build
    -stage
    -package
    -platform=HoloLens
    -clientconfig=Development
    -serverconfig=Development
    -target=UXToolsGame
    -pak
    -archive
    -archivedirectory=$(Build.ArtifactStagingDirectory)/packages
  displayName: 'Build HoloLens ARM64 Development'

- task: PublishBuildArtifacts@1
  displayName: 'Publish prebuilt UXTGame (HoloLens)'
  inputs:
    ArtifactName: 'UXTGame-HoloLens'
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\packages\HoloLens'
  condition: and(succeeded(), not(eq(variables['Build.Reason'], 'PullRequest')))

- task: PowerShell@2
  displayName: 'Check git history'
  inputs:
    targetType: 'filePath'
    filePath: $(UXTSourceDir)\Tools\scripts\CheckHistory.ps1
    workingDirectory: $(UXTSourceDir)